//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataBridge
{
    using College;
    using System;
    using System.Collections.ObjectModel;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;

    public partial class ColledgeEntities : DbContext
    {
        public ColledgeEntities()
            : base("name=ColledgeEntities")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dist> Dist { get; set; }
        public virtual DbSet<Expelled_students> Expelled_students { get; set; }
        public virtual DbSet<GPA> GPA { get; set; }
        public virtual DbSet<Groups> Groups { get; set; }
        public virtual DbSet<Kat> Kat { get; set; }
        public virtual DbSet<Marks> Marks { get; set; }
        public virtual DbSet<RUP> RUP { get; set; }
        public virtual DbSet<Spec> Spec { get; set; }
        public virtual DbSet<Students> Students { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Trainer> Trainer { get; set; }
        public virtual DbSet<DB_Users> DB_Users { get; set; }
    
        public virtual int AddDist(string nameDist)
        {
            var nameDistParameter = nameDist != null ?
                new ObjectParameter("NameDist", nameDist) :
                new ObjectParameter("NameDist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDist", nameDistParameter);
        }
    
        public virtual int AddGroup(string groupName, Nullable<int> specID)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGroup", groupNameParameter, specIDParameter);
        }
    
        public virtual int AddRUP(Nullable<int> distID, Nullable<int> specID, Nullable<int> katID, Nullable<int> trainerID, Nullable<int> semestr, string vA, Nullable<int> countOfHours)
        {
            var distIDParameter = distID.HasValue ?
                new ObjectParameter("DistID", distID) :
                new ObjectParameter("DistID", typeof(int));
    
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(int));
    
            var katIDParameter = katID.HasValue ?
                new ObjectParameter("KatID", katID) :
                new ObjectParameter("KatID", typeof(int));
    
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(int));
    
            var semestrParameter = semestr.HasValue ?
                new ObjectParameter("Semestr", semestr) :
                new ObjectParameter("Semestr", typeof(int));
    
            var vAParameter = vA != null ?
                new ObjectParameter("VA", vA) :
                new ObjectParameter("VA", typeof(string));
    
            var countOfHoursParameter = countOfHours.HasValue ?
                new ObjectParameter("CountOfHours", countOfHours) :
                new ObjectParameter("CountOfHours", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRUP", distIDParameter, specIDParameter, katIDParameter, trainerIDParameter, semestrParameter, vAParameter, countOfHoursParameter);
        }
    
        public virtual int AddSpec(string specName)
        {
            var specNameParameter = specName != null ?
                new ObjectParameter("SpecName", specName) :
                new ObjectParameter("SpecName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSpec", specNameParameter);
        }
    
        public virtual int AddStudent(Nullable<int> studentID, string name, string email, string phoneNumber, string adress, Nullable<System.DateTime> birthDate, Nullable<int> groupID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudent", studentIDParameter, nameParameter, emailParameter, phoneNumberParameter, adressParameter, birthDateParameter, groupIDParameter);
        }
    
        public virtual int DeleteDist(Nullable<int> distID)
        {
            var distIDParameter = distID.HasValue ?
                new ObjectParameter("DistID", distID) :
                new ObjectParameter("DistID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDist", distIDParameter);
        }
    
        public virtual int DeleteGroup(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGroup", groupIDParameter);
        }
    
        public virtual int DeleteRUP(Nullable<int> rUPID)
        {
            var rUPIDParameter = rUPID.HasValue ?
                new ObjectParameter("RUPID", rUPID) :
                new ObjectParameter("RUPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRUP", rUPIDParameter);
        }
    
        public virtual int DeleteSpec(Nullable<int> specID)
        {
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpec", specIDParameter);
        }
    
        public virtual int DeleteStudent(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudent", studentIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateDist(Nullable<int> distID, string nameDist)
        {
            var distIDParameter = distID.HasValue ?
                new ObjectParameter("DistID", distID) :
                new ObjectParameter("DistID", typeof(int));
    
            var nameDistParameter = nameDist != null ?
                new ObjectParameter("NameDist", nameDist) :
                new ObjectParameter("NameDist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDist", distIDParameter, nameDistParameter);
        }
    
        public virtual int UpdateGroup(Nullable<int> groupID, string groupName, Nullable<int> specID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGroup", groupIDParameter, groupNameParameter, specIDParameter);
        }
    
        public virtual int UpdateRUP(Nullable<int> rUPID, Nullable<int> distID, Nullable<int> specID, Nullable<int> katID, Nullable<int> trainerID, Nullable<int> semestr, string vA, Nullable<int> countOfHours)
        {
            var rUPIDParameter = rUPID.HasValue ?
                new ObjectParameter("RUPID", rUPID) :
                new ObjectParameter("RUPID", typeof(int));
    
            var distIDParameter = distID.HasValue ?
                new ObjectParameter("DistID", distID) :
                new ObjectParameter("DistID", typeof(int));
    
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(int));
    
            var katIDParameter = katID.HasValue ?
                new ObjectParameter("KatID", katID) :
                new ObjectParameter("KatID", typeof(int));
    
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(int));
    
            var semestrParameter = semestr.HasValue ?
                new ObjectParameter("Semestr", semestr) :
                new ObjectParameter("Semestr", typeof(int));
    
            var vAParameter = vA != null ?
                new ObjectParameter("VA", vA) :
                new ObjectParameter("VA", typeof(string));
    
            var countOfHoursParameter = countOfHours.HasValue ?
                new ObjectParameter("CountOfHours", countOfHours) :
                new ObjectParameter("CountOfHours", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRUP", rUPIDParameter, distIDParameter, specIDParameter, katIDParameter, trainerIDParameter, semestrParameter, vAParameter, countOfHoursParameter);
        }
    
        public virtual int UpdateSpec(Nullable<int> specID, string specName)
        {
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(int));
    
            var specNameParameter = specName != null ?
                new ObjectParameter("SpecName", specName) :
                new ObjectParameter("SpecName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSpec", specIDParameter, specNameParameter);
        }
    
        public virtual int UpdateStudent(Nullable<int> studentID, string name, string email, string phoneNumber, string adress, Nullable<System.DateTime> birthDate, Nullable<int> groupID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudent", studentIDParameter, nameParameter, emailParameter, phoneNumberParameter, adressParameter, birthDateParameter, groupIDParameter);
        }
    
        public virtual int Vedom(Nullable<int> groupID, Nullable<int> distID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var distIDParameter = distID.HasValue ?
                new ObjectParameter("DistID", distID) :
                new ObjectParameter("DistID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Vedom", groupIDParameter, distIDParameter);
        }
    }
}
